#import in GPIO and time
import RPi.GPIO as GPIO
import time

class ButtonModule:
    __buttonPin = 0
    __debug = 0
    __lastPress = 0
    __status = 0
    __type = 0
    __MAX = 0
    
    def __setup(self):
        GPIO.setup(self.__buttonPin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
        GPIO.add_event_detect(self.__buttonPin, GPIO.BOTH, callback=self.button_callback, bouncetime = 200)
        
    def __init__(self, buttonPin = -1, debug = False, typeResponse = 'bin', max_alert = 1):
        self.__status = 0
        self.__lastPress = 0
        self.__buttonPin = buttonPin
        self.__debug = debug
        self.__type = typeResponse
        self.__MAX = max_alert
        self.__setup()

    def button_callback(self, channel):
        if self._type == 'scale':
            timeNew = time.time()
            if self.__debug: print('button on')
            
            if  1 > timeNew - self.__lastPress  and self.__status < self.__MAX:
                if self.__debug:
                    print("new time:", timeNew)
                    print("last press:", self.__lastPress)
                self.__status = self.__status + 1

            elif self.__status >= 1:
                self.__status = 0

            else:
                self.__status = 1
                
            self.__lastPress = time.time()

            if self.__debug:
                print("press time:", self.__lastPress)
                print("Status:", self.__status)
            return 1
        else:
            if self.__status == 1:
                self.__status = 0

            else:
                self.__status = 1

    def __del__(self):
        GPIO.remove_event_detection(self.__buttonPin)
        GPIO.cleanup(self.__buttonPin)

    def getStatus(self):
        return self.__status
    def getButtonPin(self):
        return self.__buttonPin
               
